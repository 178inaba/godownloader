package main

var shellEquinoxio = `#!/bin/sh
set -e
#  Code generated by godownloader. DO NOT EDIT.
#

usage() {
  this=$1
  cat <<EOF
$this: download go binaries for {{ $.Release.GitHub.Owner }}/{{ $.Release.GitHub.Name }}

Usage: $this [version]
  where [version] is 'latest' or a version number from
  https://dl.equinox.io/{{ $.Release.GitHub.Owner }}/{{ $.Release.GitHub.Name }}/stable

Generated by godownloader
 https://github.com/goreleaser/godownloader

EOF
}` + shellfn + ` 
OWNER={{ .Release.GitHub.Owner }}
REPO={{ .Release.GitHub.Name }}
BINARY={{ .Build.Binary }}
FORMAT={{ .Archive.Format }}
BINDIR=${BINDIR:-./bin}
CHANNEL=stable
PREFIX="$OWNER/$REPO"
ARCH=$(uname_arch)
OS=$(uname_os)

VERSION=$1
case "$VERSION" in
 latest)
    VERSION=""
    ;;
 -h|-?|*help*)
   usage "$0"
   exit 1
   ;;
esac

TARGET=https://dl.equinox.io/${OWNER}/${REPO}/${CHANNEL}
TARBALL="${BINARY}-${CHANNEL}-${OS}-${ARCH}.${FORMAT}"

# wrap all destructive operations into a function
# to prevent curl|bash network truncation and disaster
execute() {
  TMPDIR=$(mktmpdir)

  echo "$PREFIX: seeking $CHANNEL latest from $TARGET"
  TARBALL_URL=$(http_download - "$TARGET" | grep "$TARBALL" | cut -d '"' -f 2)

  echo "$PREFIX: downloading from ${TARBALL_URL}"
  http_download "${TMPDIR}/${TARBALL}" "$TARBALL_URL"

  (cd "$TMPDIR" && untar "$TARBALL")
  install -d "${BINDIR}"
  install "${TMPDIR}/${BINARY}" "${BINDIR}/"
  echo "$PREFIX: installed ${BINDIR}/${BINARY}"
}

uname_os_check
uname_arch_check

execute
`
